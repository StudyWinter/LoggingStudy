<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--1、配置集中管理属性
    我们可以直接使用属性和value值
    格式:${name}
    -->
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c  %M %L [%thread] %m %n"></property>

     <!--
     日志输出格式：
     %-5level           级别
     %d{yyyy-MM-dd HH:mm:ss.SSS}日期
     %c类的完整名称            
     %M为method            
     %L为行号            
     %thread线程名称
     %m或者%msg为信息            
     %n换行    -->

     <!--2、控制台输出日志appender-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--2.1、控制输出流对象，默认的是System.out。改为System.err-->
        <target>System.err</target>

        <!--2.2、日志消格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>



    <!--定义日志文件保存路径属性，方便管理-->
    <property name="log_dir" value="E:/code/maven/logback_demo/logs"></property>


    <!--4、日志文件输出的appender    默认是追加的-->
   <appender name="file" class="ch.qos.logback.core.FileAppender">
       <!--4.1、日志文件的保存路径-->
       <file>${log_dir}/logback.log</file>

       <!--4.2日志格式-->
       <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
           <pattern>${pattern}</pattern>
       </encoder>
   </appender>

    <!--5、HTML日志文件输出appender-->
    <appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
        <!--5.1、日志文件的保存路径-->
        <file>${log_dir}/logback.html</file>

        <!--5.1html消息格式配置-->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m</pattern>
            </layout>
        </encoder>
    </appender>



    <!--6、日志拆分和归档压缩的 appender对象-->
    <appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--6.1、日志文件保存路径-->
        <file>${log_dir}/roll_logback.log</file>

        <!--6.2消息格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>

        <!--6.3、指定拆分规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--按照时间和压缩格式来声明拆分的文件名-->
            <fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>

            <!--按照文件大小进行拆分-->
            <maxFileSize>1MB</maxFileSize>
        </rollingPolicy>

        <!--7、日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--日志过滤规则   只记录ERROR级别-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>

        </filter>

    </appender>


    <!--8、异步日志-->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <!--指定某个具体的appender-->
        <appender-ref ref="rollFile"/>

    </appender>

    <!--3、配置root logger,刚才创建的logger对象默认继承root logger-->
    <root level="ALL">
      <!--  <appender-ref ref="console"/>-->
        <!--<appender-ref ref="file"/>-->
    <!--    <appender-ref ref="htmlFile"/>-->
      <!--  <appender-ref ref="rollFile"/>-->
        <appender-ref ref="async"/>
    </root>

    <!--9自定义logger对象
    additivity="false" 自定义logger对象是否继承rootLogger  false不继承
    -->
    <!--<logger name="edu.xust" level="info" additivity="false">
        <appender-ref ref="console"/>
    </logger>-->

</configuration>