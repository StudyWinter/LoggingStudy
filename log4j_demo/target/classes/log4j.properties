#指定RootLogger 顶级父元素默认配置信息
#指定日志级别是trace,使用appender为console,file,rollingFile ,dailyFile,logDB
log4j.rootLogger = trace,console

#6、自定义logger 对象设置    一般是包名,默认继承rootLogger，即同时会向控制台输出
log4j.logger.edu.xust = info


#继承rootLogger，只向控制台输出，并且日志级别是error，其以下的都不会输出
log4j.logger.org.apache = error


#1、指定控制台日志输出的appender
log4j.appender.console = org.apache.log4j.ConsoleAppender
#指定消息格式layout,使用简单格式SimpleLayout ,HTML格式HTMLLayout,xml格式xml.XMLLayout
log4j.appender.console.layout = org.apache.log4j.PatternLayout
#指定消息格式的内容
#log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n
log4j.appender.console.layout.conversionPattern =[%p] %r %l %d{yyyy-MM-dd- HH:mm:ss:SSS} %m%n

#%m     输出代码中指定的日志信息
#%p     输出优先级，及 DEBUG、INFO 等
#%n     换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
#%r     输出自应用启动到输出该 log 信息耗费的毫秒数
#%c     输出打印语句所属的类的全名
#%t     输出产生该日志的线程全名
#%d     输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss}
#%l     输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
#%F     输出日志消息产生时所在的文件名称
#%L     输出代码中的行号
#%%     输出一个 "%" 字符
#*      可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：
#%5c    输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#%-5c   输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#%.5c   输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
#%20.30c   category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉


#2、日志文件输出的appender对象
#指定文件日志输出的appender   【默认是追加的】
log4j.appender.file = org.apache.log4j.FileAppender
#指定消息格式layout,使用简单格式SimpleLayout ,HTML格式HTMLLayout,xml格式xml.XMLLayout
log4j.appender.file.layout = org.apache.log4j.PatternLayout
#指定消息格式的内容
#log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n
log4j.appender.file.layout.conversionPattern =[%p] %r %l %d{yyyy-MM-dd- HH:mm:ss:SSS} %m%n
#指定日志文件的保存路径
log4j.appender.file.file = E:/code/maven/log4j_demo/logs/log4j.log
#指定日志文件的字符集
log4j.appender.file.encoding = UTF-8


#3、按照文件大小拆分的 appender
#日志文件输出的 appender
log4j.appender.rollingFile = org.apache.log4j.RollingFileAppender
#指定消息格式layout,使用简单格式SimpleLayout ,HTML格式HTMLLayout,xml格式xml.XMLLayout
log4j.appender.rollingFile.layout = org.apache.log4j.PatternLayout
#指定消息格式的内容
#log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n
log4j.appender.rollingFile.layout.conversionPattern =[%p] %r %l %d{yyyy-MM-dd- HH:mm:ss:SSS} %m%n
#指定日志文件的保存路径
log4j.appender.rollingFile.file = E:/code/maven/log4j_demo/logs/log4j.log
#指定日志文件的字符集
log4j.appender.rollingFile.encoding = UTF-8
#指定日志文件内容的大小
log4j.appender.rollingFile.maxFileSize = 1MB
#指定日志文件的数量【默认是一个】 超过10个，按照时间覆盖
log4j.appender.rollingFile.maxBackupIndex = 10    


#4、按照时间规则拆分的 appender
#日志文件输出的 appender
log4j.appender.dailyFile = org.apache.log4j.DailyRollingFileAppender
#指定消息格式layout,使用简单格式SimpleLayout ,HTML格式HTMLLayout,xml格式xml.XMLLayout
log4j.appender.dailyFile.layout = org.apache.log4j.PatternLayout
#指定消息格式的内容
#log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n
log4j.appender.dailyFile.layout.conversionPattern =[%p] %r %l %d{yyyy-MM-dd- HH:mm:ss:SSS} %m%n
#指定日志文件的保存路径
log4j.appender.dailyFile.file = E:/code/maven/log4j_demo/logs/log4j.log
#指定日志文件的字符集
log4j.appender.dailyFile.encoding = UTF-8
#指定日期拆分规则 默认【'.'yyyy-MM-dd】
log4j.appender.dailyFile.datePattern = '.'yyyy-MM-dd-HH-mm-ss

#5、mysql
log4j.appender.logDB = org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDB.layout = org.apache.log4j.PatternLayout
log4j.appender.logDB.Driver = com.mysql.jdbc.Driver
log4j.appender.logDB.URL = jdbc:mysql://localhost:3306/springdb
log4j.appender.logDB.User = root
log4j.appender.logDB.Password = 123456
log4j.appender.logDB.Sql = INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message ) values('itcast','%d{yyyy-MM-dd HH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')